?verbatimTextOutput
runApp('shiny/Test1')
paste(res[1])
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
head(score)
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
head(score)
runApp('shiny/Test1')
?verbatimTextOutput
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
shiny::runApp('shiny/Test1')
?rep
shiny::runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
?actionButton()
runApp('shiny/Test1')
runApp()
runApp()
runApp('shiny/Test1')
?xor
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
?eventReactive
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp()
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
instakk
install.packages("rgl")
library(rgl)
data(trees)
plot3d(trees)
head(trees)
x <- c(a, a, a, b, b, b)
x <- c(1,1,1,2,2,2)
cbind(trees, x)
fix
fix(trees)
plot3d(score)
writeWebGL(width=500, height=550)
?plot3d
plot3d(score$math, score$english, score$japanese, col = socre$rank)
plot3d(score$math, score$english, score$japanese, col = score$rank)
plot3d(score$math, score$english, score$japanese, col = "brack")
plot3d(score$math, score$english, score$japanese, col = "red")
plot3d(score$math, score$english, score$japanese, col = as.integer(score$rank))
runApp('shiny/Test1')
runApp()
runApp('shiny/Test1')
# データの準備 : テストデータは1,2行目
score.train <- score[-1:-2,]
score.test <- score[1:2,]
score.train <-  cbind(score.train[, "rank"],
score.train[, "math"],
score.train[, "japanese"])
score.train <- as.data.frame(score.train)
score.test <-  cbind(score.test[, "rank"],
score.test[, "math"],
score.test[, "japanese"])
score.test <- as.data.frame(score.test)
res.lda <- lda(V1 ~ V2 + V3, data=score.train)
pre <- predict(res.lda, score.test)$class
table(pre, score.test$V1)
table(pre, score.test$V1)
t <- table(pre, score.test$V1)
t
music <- read.csv("/Users/ayana/shiny/Test1/data/music.csv")
# 訓練データとテストデータに分ける
num <- 10*(1:(nrow(music)/10))
music.test <- music[num,]
music.train <- music[-num,]
music.train <- cbind(music.train$year.1, music.train[, "umap_x"],
music.train[, "umap_y"])
music.train <- as.data.frame(music.train)
music.test <- cbind(music.test$year.1, music.test[, "umap_x"],
music.test[, "umap_y"])
music.test <- as.data.frame(music.test)
library(MASS)
res.lda <- lda(V1 ~ V2 + V3, data=music.train)
pre <- predict(res.lda, music.test)$class
table(pre, music.test$V1)
shiny::runApp('shiny/Test1')
?renderDataTable
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
?tableOutput
runApp('shiny/Test1')
runApp('shiny/Test1')
?fluidRow]
?fluidRow
runApp('shiny/Test1')
?tableOutput
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp()
runApp()
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp()
runApp('shiny/Test1')
runApp('shiny/Test1', display.mode="showcase")
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
?renderDataTable
score.train <-  cbind(score.train[, "rank"],
score.train[, "math"],
score.train[, "japanese"])
score.train <- as.data.frame(score.train)
score.test <-  cbind(score.test[, "rank"],
score.test[, "math"],
score.test[, "japanese"])
library(readr)
library(MASS)
score <- read.csv("/Users/ayana/shiny/Test1/data/shiny_test.csv")
# データの準備 : テストデータは1,2行目
score.train <- score[-1:-2,]
score.test <- score[1:2,]
score.train <-  cbind(score.train[, "rank"],
score.train[, "math"],
score.train[, "japanese"])
score.train <- as.data.frame(score.train)
score.test <-  cbind(score.test[, "rank"],
score.test[, "math"],
score.test[, "japanese"])
score.test <- as.data.frame(score.test)
res.lda <- lda(V1 ~ V2 + V3, data=score.train)
pre <- predict(res.lda, score.test)$class
t <- table(pre, score.test$V1)
# - - - 3dのplotについて - - -
plot3d(score)
plot3d(score$math, score$english, score$japanese, col = "red")
plot3d(score$math, score$english, score$japanese, col = as.integer(score$rank))
t
type(t)
class(t)
?
as.data.frame()
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
as.data.frame(t)
runApp('shiny/Test1')
?v
?dataTableOutput
runApp('shiny/Test1')
runApp('shiny/Test1')
tbl <-  ldaExe()
tbl
runApp('shiny/Test1')
runApp('shiny/Test1')
class
class(t)
as.data.frame(t)
t
pre <- predict(res.lda, score.test)$class
cbind(pre, score.test$V1)
x <- cbind(pre, score.test$V1)
as.data.frame(x)
x
pre <- predict(res.lda, score.test)$class
t <- table(pre, score.test$V1)
?table
table
t[1]
t
t[2]
t[1,1]
t[2,1]
?tags&table
?tags$table
?tags
music <- read.csv("/Users/ayana/shiny/Test1/data/music.csv")
# 訓練データとテストデータに分ける
num <- 10*(1:(nrow(music)/10))
music.test <- music[num,]
music.train <- music[-num,]
music.train <- cbind(music.train$year.1, music.train[, "umap_x"],
music.train[, "umap_y"])
music.train <- as.data.frame(music.train)
music.test <- cbind(music.test$year.1, music.test[, "umap_x"],
music.test[, "umap_y"])
music.test <- as.data.frame(music.test)
library(MASS)
res.lda <- lda(V1 ~ V2 + V3, data=music.train)
pre <- predict(res.lda, music.test)$class
table(pre, music.test$V1)
t <- table(pre, music.test$V1)
as.data.frame(t)
?as.data.frame
as.data.frame.table(t)
class(t)
as.data.frame.table(t)
as.data.frame(t)
class(t)
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
score <- read.csv("/Users/ayana/shiny/Test1/data/shiny_test.csv")
# データの準備 : テストデータは1,2行目
score.train <- score[-1:-2,]
score.test <- score[1:2,]
score.train <-  cbind(score.train[, "rank"],
score.train[, "math"],
score.train[, "japanese"])
score.train <- as.data.frame(score.train)
score.test <-  cbind(score.test[, "rank"],
score.test[, "math"],
score.test[, "japanese"])
score.test <- as.data.frame(score.test)
res.lda <- lda(V1 ~ V2 + V3, data=score.train)
pre <- predict(res.lda, score.test)$class
t <- table(pre, score.test$V1)
t
as.data.frame(t)
pre
score.test$V1
?table
?as.table
as.table(pre, score.test)
as.table(t)
as.data.frame(t)
# 訓練データとテストデータに分ける
num <- 10*(1:(nrow(music)/10))
music.test <- music[num,]
music.train <- music[-num,]
music.train <- cbind(music.train$year.1, music.train[, "umap_x"],
music.train[, "umap_y"])
music.train <- as.data.frame(music.train)
music.test <- cbind(music.test$year.1, music.test[, "umap_x"],
music.test[, "umap_y"])
music.test <- as.data.frame(music.test)
library(MASS)
res.lda <- lda(V1 ~ V2 + V3, data=music.train)
pre <- predict(res.lda, music.test)$class
t <- table(pre, music.test$V1)
t]
t
as.data.frame(t)
runApp('shiny/Test1')
runApp('shiny/Test1')
?tableOutput
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
?as.data.frame
runApp('shiny/Test1')
as.data.frame(t)
col.names(t) < c("predict", "real", "count")
colnames(t) < c("predict", "real", "count")
colnames(t) <- c("predict", "real", "count")
?colnames
names(t)
dim(t)
t
as.data.frame(t)
dim(t)
t <- as.data.frame(t)
dim(t)
colnames(t) <- c("a", "b", "c")
t
as.data.frame(tbl,
colnames("予測値","実測値", "データ数"))
# データフレームの列名の変更
t <- as.data.frame(t,
colnames() = c("a", "b", "c"))
colnames(c("a", "b", "c"))
# データフレームの列名の変更
t <- as.data.frame(t,
colnames(c("a", "b", "c")))
t
runApp('shiny/Test1')
library(MASS)
res.lda <- lda(V1 ~ V2 + V3, data=music.train)
pre <- predict(res.lda, music.test)$class
t <- table(pre, music.test$V1)
# データフレームの列名の変更
t <- as.data.frame(t,
colnames(c("a", "b", "c")))
t <- table(pre, music.test$V1)
t
# データフレームの列名の変更
t <- as.data.frame(t,
colnames(c("a", "b", "c")))
t
# データフレームの列名の変更
t <- as.data.frame(t)
dim(t)
colnames(t) <- c("a", "b", "c")
t
runApp('shiny/Test1')
t <- table(pre, music.test$V1)
# データフレームの列名の変更
t <- as.data.frame(t)
dim(t)
colnames(t) <- c("a", "b", "c")
t
runApp('shiny/Test1')
?tableOutput
runApp('shiny/Test1')
?plotOutput
runApp('shiny/Test1')
runApp('shiny/Test1')
# ニューラルネットワーク
spam <- data(spam)
# ニューラルネットワーク
library(kernlab)
spam <- data(spam)
library(nnet)
spam.nnet <- nnet(type~., data = spam.train, size = 3, decay = 1)
spam.nnet <- nnet(type~., data = spam.train, size = 3, decay = 0.5)
spam.pre <^ predict(spam.nnet, spam.test, type = "class")
spam.pre <- predict(spam.nnet, spam.test, type = "class")
spam.pre
table(spam.test, spam.pre)
table(spam.test[,58], spam.pre)
tbl <- table(spam.test[,58], spam.pre)
tbl
tbl <- table(spam.test, spam.pre[,58])
tbl <- table(spam.test[, 58], spam.pre)
# 訓練データとテストデータを作成
x <- seq( 1, nrow(spam), by = 2 )
spam.train <- spam[ x, ] # 奇数行目のレコードを訓練データとする
spam.test <- spam[ -x, ] # 偶数行目のレコードをテストデータとする
# 使用するデータの読み込み
library(kernlab)
spam <- data(spam)
# 訓練データとテストデータを作成
x <- seq( 1, nrow(spam), by = 2 )
# 訓練データとテストデータを作成
x <- seq( 1, nrow(spam), by = 2 )
nrow(spam)
spam <- data(spam)
# 訓練データとテストデータを作成
x <- seq( 1, nrow(spam), by = 2 )
head(spam)
data(spam)
# 訓練データとテストデータを作成
x <- seq( 1, nrow(spam), by = 2 )
spam.train <- spam[ x, ] # 奇数行目のレコードを訓練データとする
spam.test <- spam[ -x, ] # 偶数行目のレコードをテストデータとする
library(nnet)
spam.nnet <- nnet(type~., data = spam.train, size = 3, decay = 0.5)
spam.pre <- predict(spam.nnet, spam.test, type = "class")
spam.pre
tbl <- table(spam.test[, 58], spam.pre)
tbl
# 例題
options(encoding = "shift-jis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
# 例題
options(encoding = "shift-jis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
?encoding
??encoding
?options
# 例題
options(encoding = "shiftjis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
# 例題
options(encoding = "shift-jis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
# 例題
options(encoding = "utf-8")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
# 例題
options(encoding = "shift_jis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
# 例題
options(encoding = "shift_jis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
# 例題
options(encoding = "shift-jis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
# 例題
library(readr)
options(encoding = "shift-jis")
natsume <- read_csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
natsume <- read.csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
options(encoding = "shift-jis")
natsume <- read.csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv")
natsume <- read.csv("/Users/ayana/Documents/2020前期授業/データサイエンス/data8.csv", head = TRUE, row.names = 1)
head(natsume)
natsume
natsume.train
natsume.train <- natsume[-1,]
natsume.train
rownames(natsume)
natsume.train <- natsume[c(-1, -21),]
natsume.train
natsume.test <- natsume[c(1, 21),]
res <- nnet(出版時期 ~ ., data = natsume.train, size = 3, decay = 0.5)
predect(res, natsume.test)
predict(res, natsume.test)
predict(res, natsume.test, type = "class")
pre <- predict(res, natsume.test, type = "class")
tbl <- table(pre, natsume.test)
pre <- predict(res, natsume.test, type = "class")
tbl <- table(pre, natsume.test)
tbl <- table(pre, natsume.test)
pre
natsume.test
tbl <- table(pre, natsume.test[,2])
tbl
train( 出版時期 ~., data = natsume.train, method = "nnet",tuneLength= 4, trace = FALSE )
# decayとsizeを自動で決定する方法
library( caret )
?train
train( 出版時期 ~., data = natsume.train, method = "nnet",tuneLength= 4, trace = FALSE )
install.packages("caret")
# decayとsizeを自動で決定する方法
library( caret )
train( 出版時期 ~., data = natsume.train, method = "nnet",tuneLength= 4, trace = FALSE )
# decayとsizeを自動で決定する方法
library( caret )
train( 出版時期 ~., data = natsume.train, method = "nnet",tuneLength= 4, trace = FALSE )
install.packages('e1071')
# decayとsizeを自動で決定する方法
library( caret )
train( 出版時期 ~., data = natsume.train, method = "nnet",tuneLength= 4, trace = FALSE )
# 結果：The final values used for the model were size = 3 and decay = 1e-04.
res <- nnet(出版時期 ~ ., data = natsume.train, size = 3, decay = 1e-04)
predict(res, natsume.test)
natsume.test
# 結果：The final values used for the model were size = 3 and decay = 1e-04.
res <- nnet(出版時期 ~ ., data = natsume.train, size = 3, decay = 1e-04, type = "class")
predict(res, natsume.test)
predict(res, natsume.test, type = "class")
train( type ~., data = spam.train, method = "nnet",tuneLength= 4, trace = FALSE )
spam.pre <- predict(spam.nnet, spam.test, type = "class")
spam.pre
tbl <- table(spam.test[, 58], spam.pre)
tbl
tbl <- table(spam.test[, 58], spam.pre)
accuracy <-  (tbl[1,1]+tbl[2,2]) / (tbl[1,1]+tbl[2,2] + tbl[1,2]+tbl[2,1])
accuracy
# The final values used for the model were size = 7 and decay = 0.1.
spam.nnet <- nnet(type~., data = spam.train, size = 7, decay = 0.1)
# The final values used for the model were size = 7 and decay = 0.1.
# 最適化されたハイパーパラメータでサイド実装
spam.nnet <- nnet(type~., data = spam.train, size = 7, decay = 0.1)
spam.pre <- predict(spam.nnet, spam.test, type = "class")
spam.pre
tbl <- table(spam.test[, 58], spam.pre)
accuracy <-  (tbl[1,1]+tbl[2,2]) / (tbl[1,1]+tbl[2,2] + tbl[1,2]+tbl[2,1])
accuracy
spam.nnet <- nnet(type~., data = spam.train, size = 3, decay = 0.5)
spam.pre <- predict(spam.nnet, spam.test, type = "class")
spam.pre
tbl <- table(spam.test[, 58], spam.pre)
accuracy <-  (tbl[1,1]+tbl[2,2]) / (tbl[1,1]+tbl[2,2] + tbl[1,2]+tbl[2,1])
accuracy
spam.pre <- predict(spam.nnet, spam.test, type = "class")
spam.pre
# The final values used for the model were size = 7 and decay = 0.1.
# 最適化されたハイパーパラメータでサイド実装
spam.nnet <- nnet(type~., data = spam.train, size = 7, decay = 0.1)
spam.pre <- predict(spam.nnet, spam.test, type = "class")
spam.pre
tbl <- table(spam.test[, 58], spam.pre)
accuracy <-  (tbl[1,1]+tbl[2,2]) / (tbl[1,1]+tbl[2,2] + tbl[1,2]+tbl[2,1])
accuracy
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
shiny::runApp('shiny/Test1')
View(res)
runApp()
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
runApp('shiny/Test1')
